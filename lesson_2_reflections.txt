/*
Reflect: Initializing a Repository

What happens when you initialize a repository? Why do you need to do it?
*/

Git creates a .git folder for me. The .git folder contains meta-data of everything (excluding the .git folder) inside of the folder/repository and later will be used to track their histories.

/*
Reflect: Staging Area

How is the staging area different from the working directory and the repository? What value do you think it offers?
*/

Repository:

To me the repository is a place of working code.

If a code doesn't compile or doesn't run. It shouldn't be in the repository. A repository is place of check points.

Working Directory:

A working directory is place you can do what ever you want. It's basically a desktop full of messy shit. Use it to form ideas and try out different approaches, do experiements. Once you've made up your mind what to go into the next commit, you wrap them up and commit it.

Staging Area:

The staging area is like a checklist to me. You put things that you have decided to go into the next commit into it so that you don't forget. Once the checklist is ready, you make the commit.

/*
Reflect: Commit Size

How can you use the staging area to make sure you have one commit per logical change?
*/

Before adding anything to the staging area, have a clear plan in your head and see if the files you're to add to the staging area fit in that plan. If not, then don't add them.

/*
Reflect: When to Use Branches

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
*/

When

1. You want to do an experimental version of the current app, or

2. You want to make different language version, or

3. You want to fix a bug.

Branches allow you to make bigger and traceable changes that are not official and you don't want to commit to that master branch.


